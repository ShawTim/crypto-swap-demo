import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { SupportedCryptos } from '../cryptoPrice/slice';

export enum SwapStatus {
  INITIAL = "INITIAL",
  REVIEW = "REVIEW",
  APPROVING = "APPROVING",
  APPROVED = "APPROVED",
  CONFIRMING = "CONFIRMING",
};

export type SwapUIState = {
  status: SwapStatus,
  fromCrypto: SupportedCryptos,
  fromAmount: string,
  toCrypto: SupportedCryptos,
  isModalOpen: boolean,
};

const initialState: SwapUIState = {
  status: SwapStatus.INITIAL,
  fromCrypto: SupportedCryptos.USDC,
  fromAmount: "",
  toCrypto: SupportedCryptos.USDC,
  isModalOpen: false,
};

export const swapUISlice = createSlice({
  name: 'swapUI',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    reset: (state) => initialState,
    setStatus: (state, action: PayloadAction<SwapStatus>) => {
      state.status = action.payload;
    },
    setFromCrypto: (state, action: PayloadAction<SupportedCryptos>) => {
      state.fromCrypto = action.payload;
    },
    setFromAmount: (state, action: PayloadAction<string>) => {
      state.fromAmount = action.payload;
    },
    setToCrypto: (state, action: PayloadAction<SupportedCryptos>) => {
      state.toCrypto = action.payload;
    },
    setIsModalOpen: (state, action: PayloadAction<boolean>) => {
      state.isModalOpen = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => builder,
});

export const { reset, setStatus, setFromCrypto, setFromAmount, setToCrypto, setIsModalOpen } = swapUISlice.actions;

export default swapUISlice.reducer;
