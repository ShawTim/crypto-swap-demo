import numeral from 'numeral';

import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { SupportedCryptos } from '../cryptoPrice/slice';
import { connectWallet, initWallet } from './api';

export type WalletBalances = {
  [SupportedCryptos.USDC]: number,
  [SupportedCryptos.WBTC]: number,
  [SupportedCryptos.ETH]: number,
};

export type WalletState = {
  connectedAddress?: string,
  balances: WalletBalances,
};

const initialState: WalletState = {
  connectedAddress: undefined,
  balances: {
    [SupportedCryptos.USDC]: 100000,
    [SupportedCryptos.WBTC]: 1.2568,
    [SupportedCryptos.ETH]: 21.501,
  }
};

export const initWalletAsync = createAsyncThunk(
  'wallet/initWallet',
  initWallet
);

export const connectWalletAsync = createAsyncThunk(
  'wallet/connectWallet',
  connectWallet
);

export const walletSlice = createSlice({
  name: 'wallet',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    doSwap: (state, action: PayloadAction<{ fromCrypto: SupportedCryptos, fromAmount: number, toCrypto: SupportedCryptos, toAmount: number }>) => {
      const { fromCrypto, fromAmount, toCrypto, toAmount } = action.payload;
      state.balances[fromCrypto] = numeral(state.balances[fromCrypto]).subtract(fromAmount).value() || 0;
      state.balances[toCrypto] = numeral(state.balances[toCrypto]).add(toAmount).value() || 0;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(initWalletAsync.fulfilled, (state, action) => {
        state.connectedAddress = action.payload;
      })
      .addCase(initWalletAsync.rejected, (state, action) => {
        state.connectedAddress = undefined;
      })
      .addCase(connectWalletAsync.fulfilled, (state, action) => {
        state.connectedAddress = action.payload;
      })
      .addCase(connectWalletAsync.rejected, (state, action) => {
        state.connectedAddress = undefined;
      });
  },
});

export const { doSwap } = walletSlice.actions;

export default walletSlice.reducer;
